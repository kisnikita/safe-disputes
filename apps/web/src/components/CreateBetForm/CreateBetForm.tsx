// src/components/CreateBetForm/CreateBetForm.tsx
import React, { useState, useRef, ChangeEvent, FormEvent, useEffect } from 'react';
import './CreateBetForm.css';
import { apiFetch } from '../../utils/apiFetch';

interface Props {
  onClose: () => void;
  onCreated: () => void;
  onOpen: () => void;
}

const errorMessages: Record<string, string> = {
  'opponent not found': '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º username –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏',
  'amount too less': '–í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤ –Ω–∞ —Ç–∞–∫—É—é —Å—Ç–∞–≤–∫—É, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—ë —É–≤–µ–ª–∏—á–∏—Ç—å',
  'opponent not ready': '–í–∞—à –æ–ø–ø–æ–Ω–µ–Ω—Ç —Å–µ–π—á–∞—Å –Ω–µ –≥–æ—Ç–æ–≤ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ –ø–∞—Ä–∏',
  'internal server error': '–ù–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á—É—Ç—å –ø–æ–∑–∂–µ',
};

export const CreateBetForm: React.FC<Props> = ({ onClose, onCreated, onOpen }) => {
  useEffect(() => {
    onOpen();
  }, [onOpen]);

  const [title, setTitle] = useState('');
  const [description, setDescription] = useState('');
  const [opponent, setOpponent] = useState('');
  const [amount, setAmount] = useState<number>(0);
  const [file, setFile] = useState<File | null>(null);
  const [preview, setPreview] = useState<string | null>(null);
  const [submitting, setSubmitting] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);

  const fileInputRef = useRef<HTMLInputElement>(null);


  const handleFileChange = (e: ChangeEvent<HTMLInputElement>) => {
    const f = e.target.files?.[0] ?? null;
    setFile(f);
    if (f) {
      setPreview(URL.createObjectURL(f));
    } else {
      setPreview(null);
    }
  };

  const removePhoto = () => {
    setFile(null);
    if (preview) {
      URL.revokeObjectURL(preview);
      setPreview(null);
    }
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  const handleSubmit = async (e: FormEvent) => {
    e.preventDefault();
    setSubmitting(true);
    setError(null);

    const form = new FormData();
    form.append('title', title);
    form.append('description', description);
    form.append('opponent', opponent);
    form.append('amount', amount.toString());
    if (file) form.append('image', file);

    try {
      const res = await apiFetch('/api/v1/disputes', {
        method: 'POST',
        body: form,
      });

      if (!res.ok) {
        let serverError: string;
        try {
          const errPayload = await res.json();
          serverError = typeof errPayload.error === 'string'
            ? errPayload.error
            : `–û—à–∏–±–∫–∞ ${res.status}`;
        } catch {
          serverError = `–û—à–∏–±–∫–∞ ${res.status}`;
        }
        throw new Error(serverError);
      }

      // –£—Å–ø–µ—Ö: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º—É –æ—Ç–∫—Ä—ã—Ç–æ–π
      setSuccess(true);
    } catch (err: any) {
      const key = Object.keys(errorMessages)
        .find(k => err.message.includes(k))
        ?? err.message;
      const userMsg = errorMessages[key] || `–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–∞—Ä–∏: ${key}`;
      setError(userMsg);
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="overlay">
      <form className="form-card" onSubmit={handleSubmit}>
        <h3>–ù–æ–≤–æ–µ –ø–∞—Ä–∏</h3>

        {error && <div className="error-message">{error}</div>}

        {success ? (
          <div className="success-message">
            üéâ –ü–∞—Ä–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!
            <button
              type="button"
              className="btn-close-success"
              onClick={() => {
                onClose();
                onCreated();
              }}
            >
              –ó–∞–∫—Ä—ã—Ç—å
            </button>
          </div>
        ) : (
          <>
            <label>
              –ù–∞–∑–≤–∞–Ω–∏–µ:
              <input
                type="text"
                value={title}
                onChange={e => setTitle(e.target.value)}
                required
              />
            </label>

            <label>
              –û–ø–∏—Å–∞–Ω–∏–µ:
              <textarea
                value={description}
                onChange={e => setDescription(e.target.value)}
                required
              />
            </label>

            <label>
              –û–ø–ø–æ–Ω–µ–Ω—Ç (username):
              <input
                type="text"
                value={opponent}
                onChange={e => setOpponent(e.target.value)}
                placeholder="username"
                required
              />
            </label>

            <label>
              –°—Ç–∞–≤–∫–∞ (TON):
              <input
                type="number"
                step="0.01"
                value={amount || ''}
                onChange={e => setAmount(parseFloat(e.target.value))}
                required
              />
            </label>

            <label>
              –§–æ—Ç–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):
              <input
                ref={fileInputRef}
                type="file"
                accept="image/*"
                onChange={handleFileChange}
              />
            </label>

            {preview && (
              <div className="image-preview">
                <button
                  type="button"
                  className="remove-photo-btn"
                  onClick={removePhoto}
                  title="–£–¥–∞–ª–∏—Ç—å —Ñ–æ—Ç–æ"
                >
                  √ó
                </button>
                <img src={preview} alt="–ü—Ä–µ–≤—å—é" />
              </div>
            )}

            <div className="form-actions">
              <button
                type="button"
                className="btn-cancel"
                onClick={onClose}
                disabled={submitting}
              >
                –û—Ç–º–µ–Ω–∞
              </button>
              <button
                type="submit"
                className="btn-submit"
                disabled={submitting}
              >
                {submitting ? '–û—Ç–ø—Ä–∞–≤–∫–∞‚Ä¶' : '–í—ã–∑–≤–∞—Ç—å'}
              </button>
            </div>
          </>
        )}
      </form>
    </div>
  );
};
